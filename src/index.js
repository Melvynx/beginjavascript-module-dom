class Game {
  static COLORS = ['#ff4500', '#00cc78', '#2450a5', '#fed734', '#f9fafc'];
  static BOARD_SIZE = [25, 25];
  static PIXEL_SIZE = 20;
  static TIME_TO_WAIT = 5000;

  constructor() {
    // ü¶Å Initialise un `ColorPicker`
  }

  init() {
    // ü¶Å R√©cup√®re le board
    // üí° D√©finit le style suivant pour que ce soit beau
    // ‚ö°Ô∏è this.board.style.gridTemplateColumns = `repeat(${Game.BOARD_SIZE[0]}, ${Game.PIXEL_SIZE}px)`;
    // ü¶Å Appels la m√©thode this.initPixels()
    // ü¶Å Appels la m√©thode this.colorPicker.initPixelPicker()
  }

  // ü¶Å Cr√©er une m√©thode `initPixels`
  // * Cette m√©thode doit, pour chaque pixel du board, cr√©er un pixel et l'ajouter au board
}

class Pixel {
  static PIXEL_CLASS = 'pixel';
  static PIXEL_PICKER_CLASS = 'pixel-picker';

  constructor(color) {
    // ü¶Å Stock la couleur dans _color
    // ü¶Å Cr√©er un √©l√©ment div qui sera stock√© dans this.element
    // * D√©finit la couleur du background de l'√©l√©ment en `color`
    // * Ajoute la classe `Pixel.PIXEL_CLASS` √† l'√©l√©ment
  }
}

class ColorPicker {
  constructor(colors, currentColor) {
    // ü¶Å Stock colors et currentColor
    // ü¶Å Initie un tableau de pixels
  }

  // ü¶Å Cr√©er une m√©thode `init`
  // * Cette m√©thode va r√©cup√©rer l'√©l√©ment avec l'id `color-picker`
  // * Pour chaque couleur, elle va cr√©er un pixel et l'ajout√© √† l'√©l√©ment r√©cup√©r√©
  // * Pour chaque pixel, ajoute la class `Pixel.PIXEL_PICKER_CLASS`
  // * Si la couleur du pixel est √©gal √† `currentColor`, ajoute la class `active`
  // * Ajoute le pixel √† element avec this.element.append
  // * Stock le pixel dans le tableau de pixels
}

const game = new Game();
game.init();
